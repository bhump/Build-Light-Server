extends layout

block content
  h1= title
  p Welcome to #{project}
  //- div
  //-   l Build Status: #{buildStatus}
  div 
    l Available Webhooks
    each hook in hooks
      ul
        li= hook.hookUrl 
        li= hook.isEnabled
        li= val 
        button.btn.btn-sm(type='sumbit', value=hook.id, onClick='removeItem(this)') Remove
  div
    form(method='POST' action='/addNewWebhook')
      div.form-group
        label(for='webhookUrl') Webhook Url:
        input#webhookUrl.form-control(type='text', placeholder='Webhook Url' name='webhookUrl')
      div.form-group
        label(for='hookEnabled') Enabled:
        input#hookEnabled.form-control(type='checkbox' name='hookEnabled' checked)
      button.btn.btn-primary(type='submit') Add
  div
    l Available Polling
    each poll in polling
      ul
        li= poll.pollingUrl
        li= poll.pollingInterval
        li= poll.isEnabled
        li= val 
        button.btn.btn-sm(type='sumbit', value=poll.id, onClick='removePoll(this)') Remove
    div
    form(method='POST' action='/addNewPoll')
      div.form-group
        label(for='pollingUrl') Polling Url:
        input#pollingUrl.form-control(type='text', placeholder='Polling Url' name='pollingUrl')
      div.form-group
        label(for='accessToken') AccessToken:
        input#accessToken.form-control(type='text', placeholder='AccessToken' name='accessToken')
      div.form-group
        label(for='pollingInterval') AccessToken:
        input#pollingInterval.form-control(type='number', placeholder='Polling Interval' name='pollingInterval')
      div.form-group
        label(for='pollEnabled') Enabled:
        input#pollEnabled.form-control(type='checkbox' name='pollEnabled' checked)
      button.btn.btn-primary(type='submit') Add      
  script.
    function removeItem(item){
      console.log(item.value);

      let reqBody = {
        id: item.value
      }

      fetch('/deleteWebhook', {
        method: 'POST', 
        body: JSON.stringify(reqBody),
        headers: {
                "Content-Type": "application/json"
            }
        }).then(function(response) {
        
        if(response.ok) {
          console.log('Click was recorded');
          return;
        }
      
      throw new Error('Request failed.');
    }).catch(function(error) {
        console.log(error);
      });
    }

    function removePoll(item){
      console.log(item.value);

      let reqBody = {
        id: item.value
      }

      fetch('/deletePoll', {
        method: 'POST', 
        body: JSON.stringify(reqBody),
        headers: {
                "Content-Type": "application/json"
            }
        }).then(function(response) {
        
        if(response.ok) {
          console.log('Click was recorded');
          return;
        }
      
      throw new Error('Request failed.');
    }).catch(function(error) {
        console.log(error);
      });
    }

  //-   function handleClick(cb){
    //-   console.log(cb.checked);

    //-   let isChecked = cb.checked;

    //-   let reqBody = {
    //-     isEnabled: isChecked
    //-   }

    //-   fetch('/post', {
    //-     method: 'POST', 
    //-     body: JSON.stringify(reqBody),
    //-     headers: {
    //-             "Content-Type": "application/json"
    //-         }
    //-     }).then(function(response) {
        
    //-     if(response.ok) {
    //-       console.log('Click was recorded');
    //-       return;
    //-     }
      
    //-   throw new Error('Request failed.');
    //- }).catch(function(error) {
    //-     console.log(error);
    //-   });
  //-   }
